# Workflow name
name: Frontend Continuous Integration

# Triggers for the workflow
on:
  # Run workflow on demand
  workflow_dispatch:
  
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main
      
    paths:
      # Specify paths that should trigger the workflow
      - 'frontend/**'
      
env:
  REACT_APP_MOVIE_API_URL: 'adfb37de5d94249c29ffcde4588a775e-1808015045.us-east-1.elb.amazonaws.com'
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          
      - name: Init json package
        run: npm init -y

      # Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install the dependencies.
      - name: Install dependencies
        run: cd frontend && npm ci
      
      # Run the tests.
      - name: Running tests
        run: cd frontend && npm test
        
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          
      - name: Init json package
        run: npm init -y

      # Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install the dependencies.
      - name: Install dependencies
        run: cd frontend && npm ci

      # Run the linter.
      - run: cd frontend && npm run lint
      
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          
      - name: Init json package
        run: npm init -y

      # Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install the dependencies.
      - name: Install dependencies
        run: cd frontend && npm ci
    
      # Build and Run docker image
      - name: Build Docker Image
        run: |
           cd frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=mp-frontend:latest .

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date)."
