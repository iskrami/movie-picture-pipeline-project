# Workflow name
name: Backend Continuous Deployment

# Triggers for the workflow
on:
  # Run workflow on demand
  workflow_dispatch:
  
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main
      
    paths:
      # Specify paths that should trigger the workflow
      - 'backend/**'
  
jobs:
  install-build-test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install pipenv and dependencies
      - name: Install Pipenv and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          cd backend
          pipenv install --dev  # Install all dependencies including dev dependencies

      # Run tests using pytest with Pipenv
      - name: Run tests with pytest
        run: |
          cd backend
          pipenv run pytest  # Use the pipenv environment to run pytest

      # Run lint using pipenv
      - name: Run lint with Pipenv
        run: |
          cd backend
          pipenv run lint

      # Build and Run docker image
      - run: cd backend && docker build -t mp-backend .
      # - run: cd backend && docker run -p 5000:5000 --name mp-backend -d mp-backend
      
      # Check the running application
      # - run: curl http://localhost:5000/movies
      
  stage_deploy:
    runs-on: ubuntu-latest
    needs: install-build-test
    environment:
      name: staging

    steps:
      # Simulate a Deployment
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
      
      # Authenticate to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend-repo
        run: |
          docker tag mp-backend $REGISTRY/$REPOSITORY:mp-backend
          docker push $REGISTRY/$REPOSITORY:mp-backend
     
      
      # Deploy to kubernetes
      # - name: Push to Kuberenetes
        # run: |
          # cd backend/k8s
          # kustomize edit set image backend=425586105601.dkr.ecr.us-east-1.amazonaws.com/backend-repo:mp-backend
          # kustomize build | kubectl apply -f -
          
      # Review logs
      # - run: docker logs -f mp-backend
      
      # Stop the application
      # - run: docker stop

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date)."
