# Workflow name
name: Backend Continuous Deployment

# Triggers for the workflow
on:
  # Run workflow on demand
  workflow_dispatch:
  
  # Automatic trigger on pull request events targeting the main branch
  push:
    branches:
      - main
      
    paths:
      # Specify paths that should trigger the workflow
      - 'backend/**'
  
jobs:
  install-build-test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Cache pipenv virtual environment and pip cache
      - name: Cache pipenv environment and pip cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/backend/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      # Install pipenv and dependencies
      - name: Install Pipenv and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          cd backend
          pipenv install --dev  # Install all dependencies including dev dependencies

      # Run tests using pytest with Pipenv
      - name: Run tests with pytest
        run: |
          cd backend
          pipenv run pytest  # Use the pipenv environment to run pytest

      # Run lint using pipenv
      - name: Run lint with Pipenv
        run: |
          cd backend
          pipenv run lint

      # Build and Run docker image
      - run: cd backend && docker build -t mp-backend .
      
      # Save the Docker image as a tarball
      - name: Save Docker image as artifact
        run: |
          docker save mp-backend -o mp-backend.tar

      # Upload the tarball as an artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: mp-backend-image
          path: mp-backend.tar
      
  stage_deploy:
    runs-on: ubuntu-latest
    needs: install-build-test

    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Simulate a Deployment
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
          
      # Download and load the Docker image artifact
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: mp-backend-image

      - name: Load Docker image
        run: |
          docker load -i mp-backend.tar
      
      # Authenticate to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend-repo
          IMAGE_TAG: mp-backend-${{ github.run_number }}
        run: |
          docker tag mp-backend $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name movie-picture-cluster --region us-east-1
      
      # Deploy to kubernetes
      - name: Push to Kubernetes
        run: |
          cd backend/k8s
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f - | kubectl get svc -A
          
      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date)."
